RISC architecture

registers numbered r0-r31, with some special
r0 - always set to 0

instruction layout
(open form)
OOOOOOO ***** rrrrr RRRRR EEEEEEEEEE

O - opcode
* - register 1 bits
r - register 2 bits
R - register 3 bits
E - operand/extra bits

note: the instruction may appear like this if there is
only one register in the instruction (e.g ldli)

(word form)
OOOOOOO* ****----
EEEEEEEE EEEEEEEE


 op  | mnemonic |        inputs       |        function
-----+----------+---------------------+-------------------------------------
0x0  |   ldi    | reg1 MCD imm        |  *
0x1  |   ldr    | reg1 reg2 imm       |  reg2 = *(reg1 + imm) (where imm is sign extended to 32 bits)
0x2  |   sta    | reg  addr           |  stores reg into [addr]
0x3  |   str    | reg1 reg2 imm       |  stores reg1 into [reg2 + imm]
0x4  |   add    | reg1 reg2 reg3      |  reg3 = reg1 + reg2
0x5  |   sub    | reg1 reg2 reg3      |  reg3 = reg1 - reg2
0x6  |   or     | reg1 reg2 reg3      |  reg3 = reg1 | reg2
0x7  |   and    | reg1 reg2 reg3      |  reg3 = reg1 & reg2
0x8  |   xor    | reg1 reg2 reg3      |  reg3 = reg1 ^ reg2
0x9  |   not    | reg1 reg2           |  reg2 = ~reg1
0xA  |   lsl    | reg1 reg2 n         |  reg2 = reg1 << n (logical shift left) - rethink this
0xB  |   lsr    | reg1 reg2 n         |  reg2 = reg1 >> n (logical shift right)
0xC  |   jalcc  | reg1 reg2 reg3 reg4 |  jump and link condition - if condition is satisfied then
     |          |                     |        store return addr in reg1 and 
     |          |                     |        jump to value in reg2
later opcodes to be used for mmio, mapping and multitasking 

extra 5 bits of JALCC can be used to get all of the conditions below
NJJJJ

J - defines the JAL mode
JALEQ - J = 0 (equal)
JALG  - J = 1 (greater than)
JALL  - J = 2 (less than)
JALGS - J = 3 (greater than signed)
JALLS - J = 4 (less than signed)

N - sets negation
N = 1
JALNEQ
JALLEQ
JALGEQ
JALLEQS
JALGEQS

*
LOAD IMMEDIATE INSTRUCTION FAMILY

------- ----- ---- ----------------
 OPCODE  DEST  MCD        IMMEDIATE

OPCODE
  a single shared opcode for the instruction family

DEST
  the encoding of the destination register

MCD (minor opcode)
  0000 - load lower immediate (no effect on upper register) (LDLI)
  0001 - load upper immediate (no effect on lower register) (LDUI)
  0010 - load lower immediate (zero upper register) (LDLZ)
  0011 - load upper immediate (zero lower register) (LDUZ)
  0100 - load lower immediate (set* upper register) (LDLS)
  0101 - load upper immediate (set* lower register) (LDUS)
  0110 -  ?
  0111 -  ?

  1xxx - prepend xxx to imm and load from absolute address (LDA)

* "set" here meaning set each bit to 1